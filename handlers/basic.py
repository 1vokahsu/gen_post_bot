import datetime

import gen_scripts as gen
from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, ChatMemberUpdated
from aiogram.filters import CommandStart, StateFilter, ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards import kb
from database.queries import AsyncORM
from voice_handler import voice_trans

router: Router = Router()


class FSMFillForm(StatesGroup):
    upload_topic = State()
    upload_target = State()
    upload_product = State()
    upload_posts = State()
    upload_idea = State()
    upload_history = State()


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start
@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    print(f'{datetime.datetime.now()} - [INFO] –Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª /start ')
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç!\n'
             '–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º - —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.\n'
             '–ü—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å (–≤—Å–µ–≥–æ 3 —à–∞–≥–∞), —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ª—É—á—à–µ —Ç–µ–±–µ –ø–æ–º–æ—á—å –∏ –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º.\n\n'
             '<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:</b>\n'
             '–ö–∞–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ —Ç–≤–æ–µ–≥–æ –±–ª–æ–≥–∞ -  —á–µ–º —Ç—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –≤ —Å–≤–æ–µ–º –±–ª–æ–≥–µ?\n'
             '<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n'
             '<i>–§–∏—Ç–Ω–µ—Å - —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –∫–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å.</i>\n\n'
             '____\n'
             '<i>–ö—Å—Ç–∞—Ç–∏, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.</i>'
    )
    print(f'{datetime.datetime.now()} - [INFO] –î–æ–±–∞–≤–ª—è–µ–º user_id {message.from_user.id} –≤ –±–¥')
    await AsyncORM.add_user_id(message.from_user.id, message.from_user.username)
    print(f'{datetime.datetime.now()} - [INFO] set state for {message.from_user.id}')
    await state.set_state(FSMFillForm.upload_topic)


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º—ã –ø–æ—Å—Ç–∞
@router.message(StateFilter(FSMFillForm.upload_topic), lambda x: x.text or x.voice)
async def process_topic(message: Message,
                        state: FSMContext,
                        bot: Bot
                        ):
    print(f'{datetime.datetime.now()} - [INFO] state topic check TOPIC')
    user_id = message.from_user.id
    if message.voice:
        print(f'{datetime.datetime.now()} - [INFO] collecting voice data')
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        print(f'{datetime.datetime.now()} - [INFO] download voice data')
        file_name = f"./data/audio_{file_id}.mp3"
        await bot.download_file(file_path, file_name)
        print(f'{datetime.datetime.now()} - [INFO] voice transcriptions')
        topic = await voice_trans(file_name)
        if topic is not None:
            print(f'{datetime.datetime.now()} - [OK] topic exist')
            print(f'{datetime.datetime.now()} - [INFO] write data to db')
            await AsyncORM.add_topic(user_id, topic)
        else:
            print(f'{datetime.datetime.now()} - [ERROR] topic not exist')
    else:
        print(f'{datetime.datetime.now()} - [INFO] collecting text data')
        topic = message.text
        print(f'{datetime.datetime.now()} - [INFO] text {topic} from {user_id}')
        await AsyncORM.add_topic(user_id, topic)
        print(f'{datetime.datetime.now()} - [INFO] write data to db')

    await message.answer(
        text='–ö—Ä—É—Ç–æ!\n'
             '–î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º?\n\n'
             '–ö—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Ç–≤–æ–µ–≥–æ –±–ª–æ–≥–∞? (–∫–∞–∫–∏–µ –ª—é–¥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–∞ —Ç–µ–±—è –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è).\n'
             '–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ–ø–∏—Å–∞—Ç—å –∏—Ö.\n\n'
             '<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n'
             '<i>–í –æ—Å–Ω–æ–≤–Ω–æ–º —ç—Ç–æ —Å–µ–º–µ–π–Ω—ã–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –Ω–∞–ª–∞–¥–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</i>\n\n'
             '____\n'
             '<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>'
    )
    await state.set_state(FSMFillForm.upload_target)


# —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ—Å—Ç–∞
@router.message(StateFilter(FSMFillForm.upload_topic))
async def process_no_topic(message: Message):
    print(f"{datetime.datetime.now()} - [INFO] –õ–æ–≤–∏–º —é–∑–µ—Ä–∞ {message.from_user.id} –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TOPIC")
    await message.answer(
        text='–¢–æ, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É –±–ª–æ–≥–∞.\n\n'
             '–ö–∞–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ —Ç–≤–æ–µ–≥–æ –±–ª–æ–≥–∞ -  —á–µ–º —Ç—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –≤ —Å–≤–æ–µ–º –±–ª–æ–≥–µ?\n'
             '<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n'
             '<i>–§–∏—Ç–Ω–µ—Å - —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –∫–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å.</i>\n\n'
             '____\n'
             '<i>–ö—Å—Ç–∞—Ç–∏, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.</i>'
    )


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@router.message(StateFilter(FSMFillForm.upload_target), lambda x: x.text or x.voice)
async def process_target(message: Message,
                         state: FSMContext,
                         bot: Bot
                         ):
    print(f'{datetime.datetime.now()} - [INFO] state target check TARGET')
    user_id = message.from_user.id

    if message.voice:
        print(f'{datetime.datetime.now()} - [INFO] collecting voice data')
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        print(f'{datetime.datetime.now()} - [INFO] download voice data')
        file_name = f"./data/audio_{file_id}.mp3"
        await bot.download_file(file_path, file_name)
        print(f'{datetime.datetime.now()} - [INFO] voice transcriptions')
        target = await voice_trans(file_name)
        if target is not None:
            print(f'{datetime.datetime.now()} - [OK] target exist')
            print(f'{datetime.datetime.now()} - [INFO] text {target} from {user_id}')
            await AsyncORM.add_target(user_id, target)
            print(f'{datetime.datetime.now()} - [INFO] write data to db')
        else:
            print(f'{datetime.datetime.now()} - [ERROR] target not exist')
    else:
        print(f'{datetime.datetime.now()} - [INFO] collecting text data')
        target = message.text
        print(f'{datetime.datetime.now()} - [INFO] text {target} from {user_id}')
        await AsyncORM.add_target(user_id, target)
        print(f'{datetime.datetime.now()} - [INFO] write data to db')

    await message.answer(
        text='–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å üôÇ\n'
             '–ü—Ä–æ–¥–∞–µ—à—å –ª–∏ —Ç—ã –∫–∞–∫–∏–µ –ª–∏–±–æ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–≤–æ–µ–º –±–ª–æ–≥–µ?\n\n'
             '–ï—Å–ª–∏ –¥–∞ - —Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç –∏ –∫–∞–∫–æ–π –æ—Ñ—Ñ–µ—Ä (–æ–±–µ—â–∞–Ω–∏–µ) —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—à—å.\n\n'
             '<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n'
             '<i>–ü—Ä–æ–¥–∞—é –∫—É—Ä—Å—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ú–æ–π –æ—Ñ—Ñ–µ—Ä - 95% –º–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å–¥–∞—é—Ç –ï–ì–≠ –Ω–∞ 100 '
             '–±–∞–ª–ª–æ–≤ –≤—Å–µ–≥–æ –∑–∞ 3 –º–µ—Å—è—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.</i>\n\n'
             '____\n'
             '<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>'
    )
    await state.set_state(FSMFillForm.upload_product)


# —Ö—ç–Ω–¥–ª–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@router.message(StateFilter(FSMFillForm.upload_target))
async def process_no_target(message: Message):
    print(f'{datetime.datetime.now()} - [INFO] –õ–æ–≤–∏–º —é–∑–µ—Ä–∞ {message.from_user.id} –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TARGET')
    await message.answer(
        text='–¢–æ, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ç–≤–æ–µ–≥–æ –±–ª–æ–≥–∞.\n\n'
             '–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ–ø–∏—Å–∞—Ç—å –µ—ë.\n\n'
             '<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n'
             '<i>–í –æ—Å–Ω–æ–≤–Ω–æ–º —ç—Ç–æ —Å–µ–º–µ–π–Ω—ã–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –Ω–∞–ª–∞–¥–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</i>\n\n'
             '____\n'
             '<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>'
    )


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.upload_product), lambda x: x.text or x.voice)
async def process_product(message: Message,
                          state: FSMContext,
                          bot: Bot):
    print(f'{datetime.datetime.now()} - [INFO] state target check PRODUCT')
    user_id = message.from_user.id

    if message.voice:
        print(f'{datetime.datetime.now()} - [INFO] collecting voice data')
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        print(f'{datetime.datetime.now()} - [INFO] download voice data')
        file_name = f"./data/audio_{file_id}.mp3"
        await bot.download_file(file_path, file_name)
        print(f'{datetime.datetime.now()} - [INFO] voice transcriptions')
        product = await voice_trans(file_name)
        if product is not None:
            print(f'{datetime.datetime.now()} - [OK] product exist')
            print(f'{datetime.datetime.now()} - [INFO] product {product} from {user_id}')
            await AsyncORM.add_product(user_id, product)
            print(f'{datetime.datetime.now()} - [INFO] write data to db')
        else:
            print(f'{datetime.datetime.now()} - [ERROR] product not exist')
    else:
        print(f'{datetime.datetime.now()} - [INFO] collecting text data')
        product = message.text
        print(f'{datetime.datetime.now()} - [INFO] product {product} from {user_id}')
        await AsyncORM.add_product(user_id, product)
        print(f'{datetime.datetime.now()} - [INFO] write data to db')

    kb_ = InlineKeyboardMarkup(
        inline_keyboard=[[kb.skip_btn]]
    )
    await message.answer(
        text='–ú–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å –º–Ω–µ –ø–∞—Ä—É —Å–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Å—Ç–æ–≤?\n'
             '–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å.\n\n'
             '–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Ö —Å–µ–π—á–∞—Å —Å–∫–∏–Ω—É—Ç—å - –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ‚Äú–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚Äù.',
        reply_markup=kb_
    )
    await state.set_state(FSMFillForm.upload_posts)


# —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.upload_product))
async def process_no_product(message: Message):
    print(f'{datetime.datetime.now()} - [INFO] –õ–æ–≤–∏–º —é–∑–µ—Ä–∞ {message.from_user.id} –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö PRODUCT')
    await message.answer(
        text='–¢–æ, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª, –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ—Ç –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —è –æ–∂–∏–¥–∞–ª.\n'
             '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n\n'
             '–ü—Ä–æ–¥–∞–µ—à—å –ª–∏ —Ç—ã –∫–∞–∫–∏–µ –ª–∏–±–æ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–≤–æ–µ–º –±–ª–æ–≥–µ?\n\n'
             '–ï—Å–ª–∏ –¥–∞ - —Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç –∏ –∫–∞–∫–æ–π –æ—Ñ—Ñ–µ—Ä (–æ–±–µ—â–∞–Ω–∏–µ) —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—à—å.\n\n'
             '<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n'
             '<i>–ü—Ä–æ–¥–∞—é –∫—É—Ä—Å—ã –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ú–æ–π –æ—Ñ—Ñ–µ—Ä - 95% –º–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å–¥–∞—é—Ç –ï–ì–≠ –Ω–∞ 100 '
             '–±–∞–ª–ª–æ–≤ –≤—Å–µ–≥–æ –∑–∞ 3 –º–µ—Å—è—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.</i>\n\n'
             '____\n'
             '<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>'
    )


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Å—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.upload_posts), lambda x: x.text or x.voice)
async def process_posts(message: Message,
                        state: FSMContext,
                        bot: Bot):

    print(f'{datetime.datetime.now()} - [INFO] state target check POSTS')
    user_id = message.from_user.id

    if message.voice:
        print(f'{datetime.datetime.now()} - [INFO] collecting voice data')
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        print(f'{datetime.datetime.now()} - [INFO] download voice data')
        file_name = f"./data/audio_{file_id}.mp3"
        await bot.download_file(file_path, file_name)
        print(f'{datetime.datetime.now()} - [INFO] voice transcriptions')
        posts = await voice_trans(file_name)
        if posts is not None:
            print(f'{datetime.datetime.now()} - [OK] posts exist')
            print(f'{datetime.datetime.now()} - [INFO] posts {posts} from {user_id}')
            await AsyncORM.add_post(user_id, posts)
            print(f'{datetime.datetime.now()} - [INFO] write data to db')
        else:
            print(f'{datetime.datetime.now()} - [ERROR] posts not exist')
    else:
        print(f'{datetime.datetime.now()} - [INFO] collecting text data')
        posts = message.text
        print(f'{datetime.datetime.now()} - [INFO] posts {posts} from {user_id}')
        await AsyncORM.add_post(user_id, posts)
        print(f'{datetime.datetime.now()} - [INFO] write data to db')

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    kb_ = InlineKeyboardMarkup(
        inline_keyboard=[[kb.continue_btn]]
    )
    await message.answer(
        text='–ü—Ä–∏—à–ª–∏ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏ ‚Äú–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚Äù',
        reply_markup=kb_
    )
    await state.set_state(FSMFillForm.upload_posts)


# —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.upload_posts))
async def process_no_posts(message: Message):
    print(f'{datetime.datetime.now()} - –õ–æ–≤–∏–º —é–∑–µ—Ä–∞ {message.from_user.id} –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö POSTS')
    kb_ = InlineKeyboardMarkup(
        inline_keyboard=[[kb.skip_btn]]
    )
    await message.answer(
        text='–ú–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å –º–Ω–µ –ø–∞—Ä—É —Å–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Å—Ç–æ–≤?\n'
             '–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å.\n\n'
             '–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Ö —Å–µ–π—á–∞—Å —Å–∫–∏–Ω—É—Ç—å - –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ‚Äú–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚Äù.',
        reply_markup=kb_
    )


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
@router.callback_query(F.data == "skip")
async def process_skip(callback: CallbackQuery, state: FSMContext):
    print(f'{datetime.datetime.now()} - [INFO] –Æ–∑–µ—Ä {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\" –∏–ª–∏ \"–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\"')
    print(f'{datetime.datetime.now()} - [INFO] –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
    await state.clear()
    kb_ = InlineKeyboardMarkup(
        inline_keyboard=[[kb.seller_btn], [kb.engaging_btn]]
    )

    await callback.message.edit_text(
        text='–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –Ω–∞–ø–æ–ª–Ω—è—Ç—å —Ç–≤–æ–π –±–ª–æ–≥?\n\n'
             '–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–∞–∫–æ–π –ø–æ—Å—Ç —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å:\n'
             '\t1. <b>–ü—Ä–æ–¥–∞—é—â–∏–π</b> - –ø–æ—Å—Ç, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ, —Ç–≤–æ–∏ —á–∏—Ç–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∫–∏–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —ç–∫—Ä–∞–Ω –∏ –ø–∏—Å–∞—Ç—å '
             '—Ç–µ–±–µ –≤'
             '–ª–∏—á–∫—É, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —à–∞–Ω—Å –∫—É–ø–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç.\n'
             '\t2. <b>–í–æ–≤–ª–µ–∫–∞—é—â–∏–π</b> - —Ç–≤–æ–∏ —á–∏—Ç–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–ª–∞–∫–∞—Ç—å –∏ —Å–º–µ—è—Ç—å—Å—è —É —Å–≤–æ–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤, –∏—Ö —Å–µ—Ä–¥—Ü–∞ –±—É–¥—É—Ç '
             '—Ä–µ–∫–æ–π'
             '—Å—ã–ø–∞—Ç—å—Å—è –≤ –≤–∏–¥–µ –ª–∞–π–∫–æ–≤, –∞ –∫—Ä–∏—Ç–∏–∫–∏ –Ω–∞–∑–æ–≤—É—Ç —Ç–≤–æ–π –ø–æ—Å—Ç —Å–∞–º—ã–º —è—Ä–∫–∏–º —Å–æ–±—ã—Ç–∏–µ–º –≤ —ç—Ç–æ–º –≥–æ–¥—É.',
        reply_markup=kb_
    )
    await callback.answer()


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ–¥–∞—é—â–∏–π" –∏–ª–∏ "–í–æ–≤–ª–µ–∫–∞—é—â–∏–π"
@router.callback_query(F.data.in_(['seller', 'engaging']))
async def process_skip(callback: CallbackQuery):
    user_id = callback.from_user.id
    print(f'{datetime.datetime.now()} - [INFO] –Æ–∑–µ—Ä {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–¥–∞—é—â–∏–π\" –∏–ª–∏ \"–í–æ–≤–ª–µ–∫–∞—é—â–∏–π\"')
    if callback.data == 'seller':
        type_post = '–ü—Ä–æ–¥–∞—é—â–∏–π'
    else:
        type_post = '–í–æ–≤–ª–µ–∫–∞—é—â–∏–π'
    print(f'{datetime.datetime.now()} - [INFO] write {type_post} to db')
    await AsyncORM.add_type_post(user_id, type_post)
    kb_ = InlineKeyboardMarkup(
        inline_keyboard=[[kb.say_btn], [kb.offer_btn]]
    )
    await callback.message.edit_text(
        text='–û–∫–µ–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–¥—É–º–∫–∞ –ø–æ —Ç–µ–º–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞?\n'
             '–û–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π –º–Ω–µ –µ—ë.\n\n'
             '–ï—Å–ª–∏ –Ω–µ—Ç - —Ç–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –¥–∞–≤–∞–π —è —Å–∞–º –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏ –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n',
        reply_markup=kb_
    )
    await callback.answer()


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–Ω–µ –µ—Å—Ç—å —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å"
@router.callback_query(F.data == 'say')
async def process_idea_yes(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    print(f'{datetime.datetime.now()} - [INFO] –Æ–∑–µ—Ä {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ú–Ω–µ –µ—Å—Ç—å —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å‚Äù')
    print(f'{datetime.datetime.now()} - [INFO] set state upload idea')
    await state.set_state(FSMFillForm.upload_idea)
    if callback.message.text != '–û–∫–µ–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–¥—É–º–∫–∞ –ø–æ —Ç–µ–º–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞?\n' \
                                '–û–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π –º–Ω–µ –µ—ë.\n\n' \
                                '–ï—Å–ª–∏ –Ω–µ—Ç - —Ç–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –¥–∞–≤–∞–π —è —Å–∞–º –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏ –∑–∞–¥–∞–º —Ç–µ–±–µ ' \
                                '–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n':
        await callback.message.edit_text(
            text='–°—É–ø–µ—Ä, –æ–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π –º–Ω–µ —Å–≤–æ—é –∏–¥–µ—é.\n\n'
                 '____\n'
                 '<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>'
        )
    await callback.answer()


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–¥–µ–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.upload_idea), lambda x: x.text or x.voice)
async def process_idea(message: Message,
                       state: FSMContext,
                       bot: Bot):

    print(f'{datetime.datetime.now()} - [INFO] state target check IDEA')
    user_id = message.from_user.id

    if message.voice:
        print(f'{datetime.datetime.now()} - [INFO] collecting voice data')
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        print(f'{datetime.datetime.now()} - [INFO] download voice data')
        file_name = f"./data/audio_{file_id}.mp3"
        await bot.download_file(file_path, file_name)
        print(f'{datetime.datetime.now()} - [INFO] voice transcriptions')
        idea = await voice_trans(file_name)
        if idea is not None:
            print(f'{datetime.datetime.now()} - [OK] idea exist')
            print(f'{datetime.datetime.now()} - [INFO] idea {idea} from {user_id}')
            await AsyncORM.add_idea(user_id, idea)
            print(f'{datetime.datetime.now()} - [INFO] write data to db')
        else:
            print(f'{datetime.datetime.now()} - [ERROR] idea not exist')
    else:
        print(f'{datetime.datetime.now()} - [INFO] collecting text data')
        idea = message.text
        print(f'{datetime.datetime.now()} - [INFO] idea {idea} from {user_id}')
        await AsyncORM.add_idea(user_id, idea)
        print(f'{datetime.datetime.now()} - [INFO] write data to db')
    '''
        –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å—Ç–æ–≤
    '''
    kb_ = InlineKeyboardMarkup(
        inline_keyboard=[[kb.agree_btn], [kb.disagree_btn]]
    )
    structure = f'\t1. –¢–µ–º–∞: {await AsyncORM.get_topic(user_id)}\n' \
                f'\t2. –¶–µ–ª—å –Ω–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞: {await AsyncORM.get_type_post(user_id)}\n' \
                f'\t3. –ö–∞–∫–∏–µ –ø—Ä–∏–µ–º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' \
                f'\t\ta. {await gen.gen_sentence()}\n' \
                f'\t\tb. {await gen.gen_sentence()}\n' \
                f'\t\tc. {await gen.gen_sentence()}\n' \
                f'\t4. –ß–µ–º —Ä–∞–∑–±–∞–≤–∏–º —Ç–µ–∫—Å—Ç: {await gen.gen_sentence()}\n' \
                f'\t5. –ö–∞–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {await gen.gen_sentence()}\n' \
                f'\t6. –ö–∞–∫–∏–º –ø—Ä–∏–∑—ã–≤–æ–º –∑–∞–∫—Ä–æ–µ–º –ø–æ—Å—Ç: {await gen.gen_sentence()}\n\n'
    await AsyncORM.add_structure(user_id=user_id, structure=structure)
    await message.answer(
        text='–°–º–æ—Ç—Ä–∏, –≤–æ—Ç —Ç–∞–∫–æ–π –ø–æ—Å—Ç –Ω–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç:\n\n'
             f'{structure}'
             '–ï—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω - —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n'
             '\t - –°–º–æ—Ç—Ä–∏, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∫–∞–∫–∞—è-—Ç–æ —Ç–≤–æ—è –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, '
             '–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å —Å —Ç–æ–±–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –±—É–∫–≤–∞–ª—å–Ω–æ '
             '–≤ 3—Ö '
             '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö).\n\n'
             '–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π - —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ —è –ø–µ—Ä–µ–¥–µ–ª–∞—é)\n\n'
             '____\n'
             '<i>–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>\n\n',
        reply_markup=kb_
    )
    await state.clear()


# —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥–µ–π –ø–æ—Å—Ç–æ–≤
@router.message(StateFilter(FSMFillForm.upload_idea))
async def process_no_idea(message: Message):
    print(f'{datetime.datetime.now()} - –õ–æ–≤–∏–º —é–∑–µ—Ä–∞ {message.from_user.id} –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IDEA')
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π –º–Ω–µ –µ—ë.\n\n'
             '____\n'
             '<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>'
    )


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏‚Äù –∏–ª–∏ "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"
@router.callback_query(F.data.in_(['offer', 'disagree']))
async def process_idea_offer(callback: CallbackQuery):
    user_id = callback.from_user.id
    print(f'{datetime.datetime.now()} - [INFO] –Æ–∑–µ—Ä {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ù–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏‚Äù –∏–ª–∏ \"–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω\"')
    await AsyncORM.add_idea(user_id, 'no')
    print(f'{datetime.datetime.now()} - [INFO] write idea NO to db')
    '''
    –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    '''
    kb_ = InlineKeyboardMarkup(
        inline_keyboard=[[kb.agree_btn], [kb.disagree_btn]]
    )
    structure = f'\t1. –¢–µ–º–∞: {await AsyncORM.get_topic(user_id)}\n' \
                f'\t2. –¶–µ–ª—å –Ω–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞: {await AsyncORM.get_type_post(user_id)}\n' \
                f'\t3. –ö–∞–∫–∏–µ –ø—Ä–∏–µ–º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' \
                f'\t\ta. {await gen.gen_sentence()}\n' \
                f'\t\tb. {await gen.gen_sentence()}\n' \
                f'\t\tc. {await gen.gen_sentence()}\n' \
                f'\t4. –ß–µ–º —Ä–∞–∑–±–∞–≤–∏–º —Ç–µ–∫—Å—Ç: {await gen.gen_sentence()}\n' \
                f'\t5. –ö–∞–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {await gen.gen_sentence()}\n' \
                f'\t6. –ö–∞–∫–∏–º –ø—Ä–∏–∑—ã–≤–æ–º –∑–∞–∫—Ä–æ–µ–º –ø–æ—Å—Ç: {await gen.gen_sentence()}\n\n'
    await AsyncORM.add_structure(user_id=user_id, structure=structure)
    if not callback.message.text.startswith('–°–º–æ—Ç—Ä–∏, –≤–æ—Ç') or not callback.message.text.startswith('–û–∫–µ–π, —É —Ç–µ–±—è'):
        await callback.message.edit_text(
            text='–°–º–æ—Ç—Ä–∏, –≤–æ—Ç —Ç–∞–∫–æ–π –ø–æ—Å—Ç –Ω–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç:\n\n'
                 f'{structure}'
                 '–ï—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω - —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n'
                 '\t - –°–º–æ—Ç—Ä–∏, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∫–∞–∫–∞—è-—Ç–æ —Ç–≤–æ—è –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, '
                 '–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å —Å —Ç–æ–±–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –±—É–∫–≤–∞–ª—å–Ω–æ '
                 '–≤ 3—Ö '
                 '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö).\n\n'
                 '–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π - —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ —è –ø–µ—Ä–µ–¥–µ–ª–∞—é)\n\n'
                 '____\n'
                 '<i>–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>\n\n',
            reply_markup=kb_
        )
    await callback.answer()


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ "–°–æ–≥–ª–∞—Å–µ–Ω‚Äù
@router.callback_query(F.data == 'agree')
async def process_idea_offer(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    print(f'{datetime.datetime.now()} - [INFO] –Æ–∑–µ—Ä {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–°–æ–≥–ª–∞—Å–µ–Ω‚Äù')
    await callback.message.edit_text(
        text='–°—É–ø–µ—Ä!\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é\n\n'
             '____\n'
             '<i>–ù–∞–ø–æ–º–∏–Ω–∞—é, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>\n\n'
    )
    await callback.answer()
    await state.set_state(FSMFillForm.upload_history)


# —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.upload_history), lambda x: x.text or x.voice)
async def process_idea(message: Message,
                       state: FSMContext,
                       bot: Bot):

    print(f'{datetime.datetime.now()} - [INFO] state target check HISTORY')
    user_id = message.from_user.id

    if message.voice:
        print(f'{datetime.datetime.now()} - [INFO] collecting voice data')
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        print(f'{datetime.datetime.now()} - [INFO] download voice data')
        file_name = f"./data/audio_{file_id}.mp3"
        await bot.download_file(file_path, file_name)
        print(f'{datetime.datetime.now()} - [INFO] voice transcriptions')
        history = await voice_trans(file_name)
        if history is not None:
            print(f'{datetime.datetime.now()} - [OK] history exist')
            print(f'{datetime.datetime.now()} - [INFO] history {history} from {user_id}')
            await AsyncORM.add_history(user_id, history)
            print(f'{datetime.datetime.now()} - [INFO] write data to db')
        else:
            print(f'{datetime.datetime.now()} - [ERROR] history not exist')
    else:
        print(f'{datetime.datetime.now()} - [INFO] collecting text data')
        history = message.text
        print(f'{datetime.datetime.now()} - [INFO] history {history} from {user_id}')
        await AsyncORM.add_history(user_id, history)
        print(f'{datetime.datetime.now()} - [INFO] write data to db')

    '''
    1. –ò—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é GPT.
    2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å—Ç –≤ –ë–î
    '''
    user_data = await AsyncORM.get_user_data(user_id)
    structure = user_data['structure']
    product = user_data['product']
    idea = user_data['idea']
    history = user_data['history']
    post = user_data['post']
    if post == 'no' and idea == 'no':
        promt = '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç.\n\n' \
                '–í–æ—Ç —Ç–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É –ø–æ—Å—Ç–∞:\n' \
                f'{structure}\n' \
                '–¢–∞–∫–∂–µ —É—á—Ç–∏, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç, –≤–æ—Ç –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                f'{product}\n\n' \
                '–ú–æ—è –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å —Å–æ –º–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è :\n' \
                f'{history}'
    elif post == 'no' and idea != 'no':
        promt = '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç.\n\n' \
                '–í–æ—Ç —Ç–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É –ø–æ—Å—Ç–∞:\n' \
                f'{structure}\n' \
                '–¢–∞–∫–∂–µ —É—á—Ç–∏, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç, –≤–æ—Ç –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                f'{product}\n\n' \
                '–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞, –≤–æ—Ç –µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                f'{idea}\n\n' \
                '–ú–æ—è –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å —Å–æ –º–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è :\n' \
                f'{history}'
    elif post != 'no' and idea == 'no':
        promt = '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç.\n\n' \
                '–í–æ—Ç —Ç–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É –ø–æ—Å—Ç–∞:\n' \
                f'{structure}\n' \
                '–¢–∞–∫–∂–µ —É—á—Ç–∏, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç, –≤–æ—Ç –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                f'{product}\n\n' \
                '–ú–æ—è –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å —Å–æ –º–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è :\n' \
                f'{history}\n\n' \
                '–¢–∞–∫–∂–µ –º–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç—ã :\n' \
                f'{post}'
    else:
        promt = '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç.\n\n' \
                '–í–æ—Ç —Ç–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É –ø–æ—Å—Ç–∞:\n' \
                f'{structure}\n' \
                '–¢–∞–∫–∂–µ —É—á—Ç–∏, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç, –≤–æ—Ç –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                f'{product}\n\n' \
                '–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞, –≤–æ—Ç –µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                f'{idea}\n\n' \
                '–ú–æ—è –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å —Å–æ –º–Ω–æ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è :\n' \
                f'{history}\n\n' \
                '–¢–∞–∫–∂–µ –º–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç—ã :\n' \
                f'{post}' \

    await AsyncORM.add_gen_post(user_id, 'post body')
    await message.answer(
        text='–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π –ø–æ—Å—Ç —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª—Å—è:\n\n'
             f'{promt}\n\n'
             '–û—Ü–µ–Ω–∫—É –ø–æ—Å—Ç–∞ :)',
        reply_markup=kb.get_kb_rate()
    )
    await state.clear()


# —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥–µ–π –ø–æ—Å—Ç–æ–≤
@router.message(StateFilter(FSMFillForm.upload_history))
async def process_no_idea(message: Message):
    print(f'{datetime.datetime.now()} - –õ–æ–≤–∏–º —é–∑–µ—Ä–∞ {message.from_user.id} –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö HISTORY')
    await message.answer(
        text='–Ø –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é.\n\n'
             '____\n'
             '<i>–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ :)</i>'
    )


# —Ö—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏
@router.callback_query(F.data.in_(['1', '2', '3', '4', '5']))
async def process_idea_offer(callback: CallbackQuery):
    user_id = callback.from_user.id
    print(f'{datetime.datetime.now()} - [INFO] –Æ–∑–µ—Ä {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ü–µ–Ω–∫–∏')
    rate = callback.data
    await AsyncORM.add_rate(user_id, rate)
    print(f'{datetime.datetime.now()} - [INFO] write rate {rate} to db')
    await callback.message.edit_text(
        text='–û–≥–æ–Ω—å, –ø—Ä–∞–≤–¥–∞?\n\n'
             f'...\n\n'
    )
    await callback.answer()


# —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤—è—â–∏–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É–ª –±–æ—Ç–∞
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def user_blocked_bot(event: ChatMemberUpdated):
    await AsyncORM.add_flag_active(event.from_user.id, False)


# —Ö—ç–Ω–¥–ª–µ—Ä –ª–æ–≤—è—â–∏–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def user_unblocked_bot(event: ChatMemberUpdated):
    await AsyncORM.add_flag_active(event.from_user.id, True)

# @router.callback_query(kb.PaymentCallbackFactory.filter(F.choice == "payment"))
# async def confirm(callback: CallbackQuery, callback_data: kb.PaymentCallbackFactory):
#     builder = InlineKeyboardBuilder()
#     builder.button(
#         text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=kb.PaymentCallbackFactory(choice="confirm",
#                                                                     value_gen=callback_data.value_gen,
#                                                                     value_price=callback_data.value_price)
#     )
#     builder.adjust(1)
#     await callback.message.edit_text(
#         text="–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø—Ä–æ–¥—É–∫—Ç, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç "
#              "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ñ–æ—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ª–µ–∂–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ "
#              "–Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ, –∏ –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤,"
#              " –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∏–º–µ–µ—Ç –≤–ª–∏—è–Ω–∏—è.",
#         reply_markup=builder.as_markup()
#     )
#
#
# @router.callback_query(kb.PaymentCallbackFactory.filter(F.choice == "confirm"))
# async def order(callback: CallbackQuery, callback_data: kb.PaymentCallbackFactory, bot: Bot):
#     print(f"–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
#     await callback.message.edit_text("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n"
#                                      "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
#                                      f"–¶–µ–Ω–∞: <b>{callback_data.value_price}‚ÇΩ –∑–∞ {callback_data.value_gen} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!</b>\n"
#                                      )
#     await bot.send_invoice(
#         chat_id=callback.message.chat.id,
#         title='–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ',
#         description='–û–ø–ª–∞—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
#         payload='–û–ø–ª–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞',
#         provider_token=config.payments_token.get_secret_value(),
#         currency='RUB',
#         prices=[
#             LabeledPrice(
#                 label='–û–ø–ª–∞—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
#                 amount=int(callback_data.value_price) * 100
#             ),
#         ],
#         start_parameter='oswyndel',
#         provider_data=None,
#         photo_url=None,
#         photo_size=None,
#         photo_width=None,
#         photo_height=None,
#         need_name=False,
#         need_phone_number=False,
#         need_email=False,
#         need_shipping_address=False,
#         protect_content=True,
#         request_timeout=5
#     )
#
#
# @router.pre_checkout_query()
# async def checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
#
#
# @router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message: Message, state: FSMContext, bot: Bot):
#     print(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
#     print(f"–£—Å—Ç–∞–Ω–≤–ª–∏–≤–∞–µ–º —É —é–∑–µ—Ä–∞ {message.from_user.id} —Ñ–ª–∞–≥ –æ–ø–ª–∞—á–µ–Ω–æ")
#     await AsyncORM.update_rate(message.chat.id, True)
#     if message.successful_payment.total_amount == 6900:
#         gens = 5
#     elif message.successful_payment.total_amount == 9900:
#         gens = 10
#     else:
#         gens = 15
#     print(f"–î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É {message.from_user.id} +{gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
#     await AsyncORM.add_gens(message.from_user.id, gens)
#     await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –° –í–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ "
#                          f"{message.successful_payment.total_amount // 100} {message.successful_payment.currency}.\n\n"
#                          f"–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
#     user_channel_status = await bot.get_chat_member(chat_id=-1001711057486, user_id=message.from_user.id)
#     print(user_channel_status.status)
#     if user_channel_status.status == ChatMemberStatus.LEFT:
#         await message.answer(
#             text="–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @haappymom\n\n"
#                  "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /create_image"
#         )
#     else:
#         gens = await AsyncORM.get_gens(message.from_user.id)
#         print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —é–∑–µ—Ä–∞ {message.from_user.id} –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
#         if gens > 0:
#             await message.answer(
#                 "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ"
#             )
#             await state.set_state(FSMFillForm.upload_photo)
#         else:
#             print(f"–£ —é–∑–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å {message.from_user.id} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
#             await message.answer(text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö!",
#                                  reply_markup=kb.get_kb_fab_prices())

# @router.message(Command(commands='help'))
# async def process_help_command(message: Message, state: FSMContext, bot: Bot):
#     print(f"–Æ–∑–µ—Ä {message.from_user.id} –Ω–∞–∂–∞–ª /help ")
#     await message.answer(
#         ""
#     )
#     print(f"–î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ {message.from_user.id} –≤ –±–¥")
#     await AsyncORM.add_user_id(message.from_user.id, message.from_user.username)
#     user_channel_status = await bot.get_chat_member(chat_id=-1001711057486, user_id=message.from_user.id)
#     print(user_channel_status.status)
#     if user_channel_status.status == ChatMemberStatus.LEFT:
#         await message.answer(
#             text="–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @\n\n"
#                  "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /create_image"
#         )
#     else:
#         gens = await AsyncORM.get_gens(message.from_user.id)
#         print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —é–∑–µ—Ä–∞ {message.from_user.id} –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
#         if gens > 0:
#             await message.answer(
#                 "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ"
#             )
#             await state.set_state(FSMFillForm.upload_photo)
#         else:
#             print(f"–£ —é–∑–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å {message.from_user.id} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
#             await message.answer(text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö!",
#                                  reply_markup=kb.get_kb_fab_prices())
